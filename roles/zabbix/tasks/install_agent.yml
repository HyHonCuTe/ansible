---
# Install and Configure Zabbix Agent
# Author: HiepvHo
# Updated: 2025-10-28 15:10:00 UTC

- name: "Display Zabbix Agent installation start"
  debug:
    msg: |
      ╔════════════════════════════════════════════════╗
      ║   📦 Zabbix Agent Installation Starting       ║
      ╚════════════════════════════════════════════════╝
      
      Host: {{ ansible_hostname }}
      IP: {{ ansible_default_ipv4.address }}
      Server: {{ zabbix_agent_server }}
      Time: {{ ansible_date_time.iso8601 }}

# ==========================================
# Install Zabbix Agent
# ==========================================

- name: "Check if Zabbix repository is already installed"
  shell: rpm -qa | grep -i zabbix-release || echo "not_installed"
  register: zabbix_repo_check
  changed_when: false
  failed_when: false

- name: "Install Zabbix repository for agent"
  yum:
    name: "https://repo.zabbix.com/zabbix/{{ zabbix_version }}/rhel/9/x86_64/zabbix-release-{{ zabbix_release }}.el9.noarch.rpm"
    state: present
    disable_gpg_check: yes
  when: 
    - ansible_os_family == "RedHat"
    - "'not_installed' in zabbix_repo_check.stdout"

- name: "Clean DNF cache"
  command: dnf clean all
  changed_when: false

- name: "Install Zabbix Agent (version 1)"
  dnf:
    name: zabbix-agent
    state: present
  when: ansible_os_family == "RedHat"

# ==========================================
# FIX: Detect agent version and configuration
# ==========================================

- name: "Check which Zabbix Agent package is installed"
  shell: rpm -qa | grep -E '^zabbix-agent' | head -1
  register: installed_agent_pkg
  changed_when: false
  failed_when: false

- name: "Display installed agent package"
  debug:
    msg: "Installed package: {{ installed_agent_pkg.stdout }}"

- name: "Check if zabbix_agentd.conf exists"
  stat:
    path: /etc/zabbix/zabbix_agentd.conf
  register: agent_conf_v1

- name: "Check if zabbix_agent2.conf exists"
  stat:
    path: /etc/zabbix/zabbix_agent2.conf
  register: agent_conf_v2

- name: "Determine agent type"
  set_fact:
    is_agent2: "{{ 'zabbix-agent2' in installed_agent_pkg.stdout }}"

- name: "Set agent configuration variables"
  set_fact:
    zabbix_agent_config: "{{ '/etc/zabbix/zabbix_agent2.conf' if is_agent2 else '/etc/zabbix/zabbix_agentd.conf' }}"
    zabbix_agent_service: "{{ 'zabbix-agent2' if is_agent2 else 'zabbix-agent' }}"
    zabbix_agent_binary: "{{ 'zabbix_agent2' if is_agent2 else 'zabbix_agentd' }}"
    zabbix_agent_log: "{{ '/var/log/zabbix/zabbix_agent2.log' if is_agent2 else '/var/log/zabbix/zabbix_agentd.log' }}"
    zabbix_agent_pid: "{{ '/run/zabbix/zabbix_agent2.pid' if is_agent2 else '/run/zabbix/zabbix_agentd.pid' }}"

- name: "Display agent configuration"
  debug:
    msg: |
      Agent Type: {{ 'Agent 2 (Active-Passive)' if is_agent2 else 'Agent 1 (Classic)' }}
      Service: {{ zabbix_agent_service }}
      Config: {{ zabbix_agent_config }}
      Binary: {{ zabbix_agent_binary }}
      Log: {{ zabbix_agent_log }}

- name: "Check if config file exists"
  stat:
    path: "{{ zabbix_agent_config }}"
  register: config_file_exists

- name: "Create config file if missing"
  copy:
    content: |
      {% if is_agent2 %}
      # Zabbix Agent 2 Configuration File
      # Auto-generated by Ansible - {{ ansible_date_time.iso8601 }}
      
      PidFile={{ zabbix_agent_pid }}
      LogFile={{ zabbix_agent_log }}
      LogFileSize=10
      Server={{ zabbix_agent_server }}
      ServerActive={{ zabbix_agent_server_active }}
      Hostname={{ zabbix_agent_hostname }}
      ListenPort={{ zabbix_agent_listen_port }}
      
      # Plugins
      Plugins.SystemRun.LogRemoteCommands=0
      {% else %}
      # Zabbix Agent Configuration File
      # Auto-generated by Ansible - {{ ansible_date_time.iso8601 }}
      
      PidFile={{ zabbix_agent_pid }}
      LogFile={{ zabbix_agent_log }}
      LogFileSize=10
      Server={{ zabbix_agent_server }}
      ServerActive={{ zabbix_agent_server_active }}
      Hostname={{ zabbix_agent_hostname }}
      ListenPort={{ zabbix_agent_listen_port }}
      EnableRemoteCommands=0
      
      # User parameters
      Include=/etc/zabbix/zabbix_agentd.d/*.conf
      {% endif %}
    dest: "{{ zabbix_agent_config }}"
    owner: root
    group: root
    mode: '0644'
  when: not config_file_exists.stat.exists

# ==========================================
# Configure Zabbix Agent
# ==========================================

- name: "Backup original Zabbix Agent config"
  copy:
    src: "{{ zabbix_agent_config }}"
    dest: "{{ zabbix_agent_config }}.bak.{{ ansible_date_time.epoch }}"
    remote_src: yes
    force: no
  ignore_errors: yes

- name: "Configure Zabbix Agent - Server"
  lineinfile:
    path: "{{ zabbix_agent_config }}"
    regexp: '^Server='
    line: 'Server={{ zabbix_agent_server }}'
    backup: yes
    create: yes

- name: "Configure Zabbix Agent - ServerActive"
  lineinfile:
    path: "{{ zabbix_agent_config }}"
    regexp: '^ServerActive='
    line: 'ServerActive={{ zabbix_agent_server_active }}'
    backup: yes
    create: yes

- name: "Configure Zabbix Agent - Hostname"
  lineinfile:
    path: "{{ zabbix_agent_config }}"
    regexp: '^Hostname='
    line: 'Hostname={{ zabbix_agent_hostname }}'
    backup: yes
    create: yes

- name: "Configure Zabbix Agent - ListenPort"
  lineinfile:
    path: "{{ zabbix_agent_config }}"
    regexp: '^# ?ListenPort='
    line: 'ListenPort={{ zabbix_agent_listen_port }}'
    backup: yes
    create: yes

- name: "Configure Zabbix Agent - PidFile"
  lineinfile:
    path: "{{ zabbix_agent_config }}"
    regexp: '^# ?PidFile='
    line: 'PidFile={{ zabbix_agent_pid }}'
    backup: yes
    create: yes

- name: "Configure Zabbix Agent - LogFile"
  lineinfile:
    path: "{{ zabbix_agent_config }}"
    regexp: '^# ?LogFile='
    line: 'LogFile={{ zabbix_agent_log }}'
    backup: yes
    create: yes

- name: "Configure Zabbix Agent - LogFileSize"
  lineinfile:
    path: "{{ zabbix_agent_config }}"
    regexp: '^# ?LogFileSize='
    line: 'LogFileSize=10'
    backup: yes
    create: yes

- name: "Disable remote commands (security)"
  lineinfile:
    path: "{{ zabbix_agent_config }}"
    regexp: '^# ?{{ "Plugins.SystemRun.LogRemoteCommands" if is_agent2 else "EnableRemoteCommands" }}='
    line: '{{ "Plugins.SystemRun.LogRemoteCommands=0" if is_agent2 else "EnableRemoteCommands=0" }}'
    backup: yes
    create: yes

# ==========================================
# FIX: Copy config to /etc/zabbix_agentd.conf (if service uses this path)
# ==========================================

- name: "Check what config file systemd service uses"
  shell: |
    grep -E "ExecStart.*-c" /usr/lib/systemd/system/{{ zabbix_agent_service }}.service || echo "NO_CONFIG_FLAG"
  register: service_config_check
  changed_when: false
  failed_when: false

- name: "Display service config check"
  debug:
    msg: "Service config usage: {{ service_config_check.stdout }}"

- name: "Check if /etc/zabbix_agentd.conf exists (wrong location)"
  stat:
    path: /etc/zabbix_agentd.conf
  register: wrong_config_exists

- name: "Copy correct config to /etc/zabbix_agentd.conf (if agent uses this)"
  copy:
    src: "{{ zabbix_agent_config }}"
    dest: /etc/zabbix_agentd.conf
    remote_src: yes
    owner: root
    group: root
    mode: '0644'
  when: wrong_config_exists.stat.exists or 'NO_CONFIG_FLAG' in service_config_check.stdout

- name: "Update systemd service to use correct config file"
  lineinfile:
    path: /usr/lib/systemd/system/{{ zabbix_agent_service }}.service
    regexp: '^ExecStart='
    line: 'ExecStart=/usr/sbin/{{ zabbix_agent_binary }} -c {{ zabbix_agent_config }} -f'
    backup: yes
  register: service_file_updated

# ==========================================
# Fix Permissions and Directories
# ==========================================

- name: "Ensure Zabbix user exists"
  user:
    name: zabbix
    system: yes
    create_home: no
    shell: /sbin/nologin
  ignore_errors: yes

- name: "Ensure Zabbix log directory exists"
  file:
    path: /var/log/zabbix
    state: directory
    owner: zabbix
    group: zabbix
    mode: '0755'

- name: "Ensure Zabbix run directory exists"
  file:
    path: /run/zabbix
    state: directory
    owner: zabbix
    group: zabbix
    mode: '0755'

- name: "Ensure Zabbix config directory exists"
  file:
    path: /etc/zabbix/zabbix_agentd.d
    state: directory
    owner: root
    group: root
    mode: '0755'

- name: "Create tmpfiles.d config for Zabbix Agent"
  copy:
    content: |
      d /run/zabbix 0755 zabbix zabbix -
    dest: /usr/lib/tmpfiles.d/zabbix-agent.conf
    owner: root
    group: root
    mode: '0644'

- name: "Apply tmpfiles configuration"
  command: systemd-tmpfiles --create
  changed_when: false

# ==========================================
# SELinux Configuration
# ==========================================

- name: "Check if SELinux is enabled"
  command: getenforce
  register: selinux_status
  changed_when: false
  failed_when: false

- name: "Install SELinux policy for Zabbix Agent"
  dnf:
    name: zabbix-selinux-policy
    state: present
  when: 
    - selinux_status.stdout is defined
    - selinux_status.stdout != "Disabled"
  ignore_errors: yes

- name: "Restore SELinux contexts"
  command: "restorecon -Rv {{ item }}"
  loop:
    - /etc/zabbix
    - /etc/zabbix_agentd.conf
    - /var/log/zabbix
    - /run/zabbix
  when: 
    - selinux_status.stdout is defined
    - selinux_status.stdout != "Disabled"
  ignore_errors: yes

# ==========================================
# Firewall Configuration
# ==========================================

- name: "Check if firewalld is running"
  systemd:
    name: firewalld
  register: firewalld_status
  ignore_errors: yes

- name: "Configure firewall for Zabbix Agent"
  firewalld:
    port: "{{ zabbix_agent_listen_port }}/tcp"
    permanent: yes
    state: enabled
    immediate: yes
  when: 
    - configure_firewall | bool
    - firewalld_status.status is defined
    - firewalld_status.status.ActiveState == "active"
  ignore_errors: yes

# ==========================================
# Start and Enable Zabbix Agent
# ==========================================

- name: "Reload systemd daemon (if service file changed)"
  systemd:
    daemon_reload: yes
  when: service_file_updated is changed

- name: "Stop agent before restart"
  systemd:
    name: "{{ zabbix_agent_service }}"
    state: stopped

- name: "Test config file before starting"
  shell: "{{ zabbix_agent_binary }} -c {{ zabbix_agent_config }} -t agent.ping"
  register: config_test
  changed_when: false

- name: "Start and enable Zabbix Agent"
  systemd:
    name: "{{ zabbix_agent_service }}"
    state: started
    enabled: yes
  register: agent_start

- name: "Wait for agent to fully start"
  wait_for:
    timeout: 5
  delegate_to: localhost

- name: "Check Zabbix Agent final status"
  systemd:
    name: "{{ zabbix_agent_service }}"
  register: agent_status

- name: "Get Zabbix Agent version"
  shell: "{{ zabbix_agent_binary }} -V 2>/dev/null | head -1 || echo 'Unable to get version'"
  register: agent_version
  changed_when: false

# ==========================================
# Verification
# ==========================================

- name: "Verify config file being used"
  shell: |
    ps aux | grep {{ zabbix_agent_binary }} | grep -v grep | grep -o "configuration file: [^ ]*" || echo "Config not shown in process"
  register: actual_config_check
  changed_when: false

- name: "Verify Zabbix Agent configuration"
  shell: |
    echo "Service: {{ zabbix_agent_service }}"
    echo "Expected config: {{ zabbix_agent_config }}"
    echo "Actual config: {{ actual_config_check.stdout }}"
    echo "Listening: $(ss -tlnp | grep {{ zabbix_agent_listen_port }} | wc -l) port(s)"
    echo "Processes: $(ps aux | grep -E '{{ zabbix_agent_binary }}' | grep -v grep | wc -l)"
  register: agent_verify
  changed_when: false

- name: "Check log for connection to correct server"
  shell: |
    if [ -f {{ zabbix_agent_log }} ]; then
      sleep 3
      tail -30 {{ zabbix_agent_log }} | grep -E "192.168.1.125|127.0.0.1" | tail -5
    fi
  register: connection_check
  changed_when: false
  failed_when: false

- name: "Check for 127.0.0.1 errors"
  shell: |
    tail -30 {{ zabbix_agent_log }} | grep "127.0.0.1" >/dev/null && echo "❌ ERROR: Connecting to 127.0.0.1" || echo "✅ OK: No 127.0.0.1 connections"
  register: localhost_check
  changed_when: false
  failed_when: false

- name: "Test agent connectivity to server"
  shell: |
    timeout 5 bash -c "echo '' | nc -w 2 {{ zabbix_agent_server }} 10051" 2>/dev/null && echo "✅ Server reachable" || echo "⚠️ Server unreachable"
  register: server_connectivity
  changed_when: false
  failed_when: false

# ==========================================
# Display Installation Summary
# ==========================================

- name: "Display Zabbix Agent installation summary"
  debug:
    msg: |
      ╔════════════════════════════════════════════════╗
      ║   ✅ Zabbix Agent Installation Complete       ║
      ╚════════════════════════════════════════════════╝
      
      📦 Version: {{ agent_version.stdout }}
      
      🖥️  Host Information:
         Hostname: {{ zabbix_agent_hostname }}
         IP: {{ ansible_default_ipv4.address }}
         Listen Port: {{ zabbix_agent_listen_port }}
      
      🔗 Server Configuration:
         Server: {{ zabbix_agent_server }}
         ServerActive: {{ zabbix_agent_server_active }}
      
      🌐 Service:
         Status: {{ agent_status.status.ActiveState }}
         Service: {{ zabbix_agent_service }}
         Config: {{ zabbix_agent_config }}
      
      📊 Verification:
        {{ agent_verify.stdout | indent(9, true) }}
      
      🔌 Connection Check:
        {{ localhost_check.stdout }}
        {{ connection_check.stdout | default('No log entries') }}
      
      🌍 Server Connectivity:
        {{ server_connectivity.stdout }}
      
      ✅ Next Steps:
         1. Login: http://{{ zabbix_agent_server }}/zabbix
         2. Configuration → Hosts → Create host
         3. Host name: {{ zabbix_agent_hostname }}
         4. IP: {{ ansible_default_ipv4.address }}:{{ zabbix_agent_listen_port }}
         5. Link template: Template OS Linux by Zabbix agent

- name: "FAIL if agent is not running"
  fail:
    msg: |
      ❌ CRITICAL: Zabbix Agent is not running!
      Status: {{ agent_status.status.ActiveState }}
      
      Debug:
      sudo systemctl status {{ zabbix_agent_service }} -l
      sudo tail -50 {{ zabbix_agent_log }}
  when: agent_status.status.ActiveState != "active"